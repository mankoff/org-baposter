
* Introduction
:PROPERTIES:
:BAPOSTER_COLUMN: 0
:BAPOSTER_SPAN: 5
:END:

This README.org file implements =org_baposter=. The results can be seen in README.pdf. It's not a well-developed package (pull requests accepted) but works for me. This README should help you get things working if you prefer to use =Org Mode= instead of LaTeX for your poster development.

=baposter= support is not yet a full =Emacs= package accessible entirely through =Org Mode=. This =org_baposter= setup requires editing some LaTeX code.

*Org Baposter*

=Org Mode= support for =baposter= is implemented by the [[id:ob-baposter::ob-baposter][ob-baposter]] code block at the bottom of this file. Evaluate it, then export this file with =C-c C-e p p=, then compile the generated =.tex= file.

*Poster Header*

The poster header (logos, title, authors) and style (box shapes, colors, etc.) are maintained in LaTeX. Edit =org_baposter.tex= directly. The background grid can be turned off by setting =grid= to =false= or commenting out =grid=true=.

*References*

References are placed in =library.bib= and controlled by =references.tex=. At the moment all references are included via a =\nocite{*}= but this can be changed.


* Tables
:PROPERTIES:
:BAPOSTER_COLUMN: 5
:BAPOSTER_SPAN: 5
:END:

There is limited support for =Org Babel=. Tables must be embedded in a =:results drawer=.

#+BEGIN_SRC jupyter-python :exports results :results drawer
import pandas as pd
import numpy as np
df = pd.DataFrame(np.random.random((3,3))*10,
                  columns=['foo','bar','baz'],
                  index=['a','b','c'])

df.round(3)
#+END_SRC

#+RESULTS:
:results:
|    |   foo |   bar |   baz |
|----+-------+-------+-------|
| a  | 5.851 | 3.701 | 4.677 |
| b  | 7.526 | 5.137 | 6.964 |
| c  | 7.935 | 3.939 | 4.827 |
:end:

* Figures
:PROPERTIES:
:BAPOSTER_COLUMN: 5
:BAPOSTER_SPAN: 5
:BAPOSTER_BELOW: tables
:END:

There is limited support for =Org Babel=. As with tables, figures generated by =Org Babel= can be wrapped in a =drawer=, but =#+CAPTION= and sizing (via =#+ATTR_LATEX=) are not supported. It is easier to generate the figure with =:exports none= and then use raw LaTeX code to include it. 

#+NAME: org-fig
#+BEGIN_SRC jupyter-python :exports none :results drawer file :file ./fig/fig.png
import numpy as np
import matplotlib.pyplot as plt

x = np.linspace(0, 2*np.pi, 100)
y0 = np.cos(x)
y1 = np.sin(x)

p0 = plt.plot(x,y0)
p1 = plt.plot(x,y1)
#+END_SRC

#+RESULTS: org-fig
:results:
[[file:./fig/fig.png]]
:end:

\begin{center}
  \includegraphics[width=0.45\linewidth]{fig/fig.png}
  \captionof{figure}{\label{fig:some_fig}This figure is generated with the code above. Neither the code or figure are exported. The figure is then placed with LaTeX code.}
\end{center}

* Lists and Text
:PROPERTIES:
:BAPOSTER_COLUMN: 0
:BAPOSTER_SPAN: 5
:BAPOSTER_BELOW: Introduction
:END:

Normal =Org Mode= syntax is supported including *bold* and /italic/, and other features.

+ Lists (but without checkboxes)
+ Sub-lists
  + Item 1
  + Item 2

And if you prefer, you can embed LaTeX anywhere you like.

\vspace{7mm}

* Lorem
:PROPERTIES:
:BAPOSTER_COLUMN: 0
:BAPOSTER_SPAN: 3
:BAPOSTER_BELOW: Lists and Text
:END:

\lipsum[1][1]

\lipsum[1][2]

\lipsum[1][3-4]

* Ipsum
:PROPERTIES:
:BAPOSTER_COLUMN: 3
:BAPOSTER_SPAN: 7
:BAPOSTER_BELOW: Figures
:END:

\begin{multicols}{2}
\lipsum[2]
\end{multicols}

* References
:PROPERTIES:
:BAPOSTER_COLUMN: 0
:BAPOSTER_SPAN: 10
:BAPOSTER_ABOVE: bottom
:END:

\begin{multicols}{3}
  \nocite{*}
  \printbibliography[heading=none]
\end{multicols}

* ob-baposter                                           :noexport:
:PROPERTIES:
:ID: ob-baposter
:END:

#+NAME: ob-baposter
#+begin_src emacs-lisp
(require 'ox-latex)

(org-export-define-derived-backend 'baposter 'latex
  :menu-entry
  '(?p "Export to BAPoster"
       ((?P "To LaTeX buffer" org-baposter-export-as-latex)
        (?p "To LaTeX file" org-baposter-export-to-latex)
        (?o "To PDF file" org-baposter-export-to-pdf)))
  :options-alist
  '((:baposter-title "TITLE" nil nil t)
    (:baposter-author "AUTHOR" nil nil t)
    (:baposter-institution "SUBAUTHOR" nil nil t))
  :translate-alist
  '((template . org-baposter-template)
    (headline . org-baposter-headline)
    (src-block . org-baposter-src-block)
    )) ;; Handle custom cases


(defun org-baposter-template (contents info)
  "Generate the BAPoster template for CONTENTS, including LaTeX headers and custom document-level LaTeX code."
  (let ((title (org-export-data (plist-get info :baposter-title) info))
        (author (org-export-data (plist-get info :baposter-author) info))
        (institution (org-export-data (plist-get info :baposter-institution) info))
        ;; Collect LATEX_HEADER entries
        (headers (org-element-map (plist-get info :parse-tree) 'keyword
                   (lambda (keyword)
                     (when (string= (org-element-property :key keyword) "LATEX_HEADER")
                       (org-element-property :value keyword)))))
        ;; Collect custom LaTeX from BEGIN_SRC latex blocks
        (custom-latex
         (org-element-map (plist-get info :parse-tree) 'src-block
           (lambda (src-block)
             (when (string= (org-element-property :language src-block) "latex")
               (org-element-property :value src-block))))))
    (concat
     "\\include{org_baposter.tex}\n"
     contents
     "\n\\end{poster}\n"
     "\\end{document}\n")))

(defun org-baposter-headline (headline contents info)
  "Translate a HEADLINE element to a \\headerbox for BAPoster."
  (let* ((title (org-element-property :raw-value headline)) ; Get the title
         (name (replace-regexp-in-string " " "-" (downcase title)))
         (column (or (org-element-property :BAPOSTER_COLUMN headline) "1"))
         (span (or (org-element-property :BAPOSTER_SPAN headline) "1"))
	 (above-title (org-element-property :BAPOSTER_ABOVE headline))
         (below-title (org-element-property :BAPOSTER_BELOW headline)))
    (format "\\headerbox{%s}{name=%s,column=%s,span=%s%s%s}  {\n%s\n}\n"
            (org-export-data title info)
            name
            column
            span
	    (if below-title
		(format ",below=%s"
			(replace-regexp-in-string " " "-" (downcase below-title))) "")
	    (if above-title
		(format ",above=%s"
			(replace-regexp-in-string " " "-" (downcase above-title))) "")
	    ;; (if below (format ",below=%s" below) "")
            contents)))

(defun org-baposter-src-block (src-block contents info)
  "Handle source blocks for the BAPoster exporter.
Include LaTeX blocks verbatim, and delegate other languages to the default LaTeX exporter."
  (message "SRC-BLOCK VALUE: %s" (org-element-property :value src-block))
  (message "LANGUAGE: %s" (org-element-property :language src-block))
  (let ((lang (org-element-property :language src-block)))
    (cond
     ;; If language is LaTeX, include content verbatim
     ((and lang (string= lang "latex"))
      (concat (org-element-property :value src-block) "\n"))
     ;; Otherwise, delegate to the default LaTeX backend
     (t (org-export-with-backend 'latex src-block contents info)))))

(defun org-baposter-export-as-latex (&optional async subtreep visible-only body-only ext-plist)
  "Export current buffer to a LaTeX buffer using the BAPoster backend."
  (interactive)
  (org-export-to-buffer 'baposter "*Org BAPoster Export*"
    async subtreep visible-only body-only ext-plist
    (lambda () (LaTeX-mode))))

(defun org-baposter-export-to-latex (&optional async subtreep visible-only body-only ext-plist)
  "Export current buffer to a LaTeX file using the BAPoster backend."
  (interactive)
  (let ((outfile (org-export-output-file-name ".tex" subtreep)))
    (org-export-to-file 'baposter outfile
      async subtreep visible-only body-only ext-plist)))

(defun org-baposter-export-to-pdf (&optional async subtreep visible-only body-only ext-plist)
  "Export current buffer to a PDF file using the BAPoster backend."
  (interactive)
  (let ((outfile (org-export-output-file-name ".tex" subtreep)))
    (org-export-to-file 'baposter outfile
      async subtreep visible-only body-only ext-plist)
    (org-latex-compile outfile)))
#+end_src


#+RESULTS:
: org-baposter-export-to-pdf
